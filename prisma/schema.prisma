// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
  teams         Team[]
  roles         TeamUserRole[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

enum TeamType {
  PERSONAL
  BUSINESS
}

model Team {
  id           String         @id @default(cuid())
  name         String
  teamType     TeamType
  projects     Project[]
  users        TeamUserRole[]
  image        String?
  slug         String
  personalUser User?          @relation(fields: [userId], references: [id])

  userId String?
  @@unique([slug], name: "Team_slug_unique")
}

enum RoleType {
  OWNER
  MEMBER
}

model TeamUserRole {
  id     String   @id @default(cuid())
  userId String
  user   User     @relation(fields: [userId], references: [id])
  teamId String
  team   Team     @relation(fields: [teamId], references: [id])
  role   RoleType @default(MEMBER)
}

model Project {
  id       String    @id @default(cuid())
  teamId   String
  team     Team      @relation(fields: [teamId], references: [id])
  name     String
  slug     String
  abtests  ABTest[]
  paywalls Paywall[]
  prices   Price[]
  events   Event[]
  journies Journey[]

  @@unique([slug, teamId], name: "Project_Team_slug_unique")
}

model Paywall {
  id                  String               @id @default(cuid())
  active              Boolean
  projectId           String
  project             Project              @relation(fields: [projectId], references: [id])
  sections            Section[]
  name                String
  slug                String
  dismissable         Boolean
  impressionCount     BigInt
  conversionCount     BigInt
  journeyPaywallItems JourneyPaywallItem[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt

  @@unique([slug, projectId], name: "Paywall_Project_slug_unique")
}

model Section {
  id        String   @id @default(cuid())
  type      String
  paywallId String
  paywall   Paywall  @relation(fields: [paywallId], references: [id])
  height    Int
  name      String
  html      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Duration {
  WEEKLY
  MONTHLY
  ANNUALLY
  LIFETIME
  DAILY
}

model Price {
  id                String   @id @default(cuid())
  projectId         String
  project           Project  @relation(fields: [projectId], references: [id])
  cost              Float
  isDiscounted      Boolean
  percentDiscounted Int
  duration          Duration
  impressionCount   BigInt
  conversionCount   BigInt
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt


  @@unique([projectId, cost, isDiscounted, percentDiscounted, duration])
}

model Event {
  id                String             @id @default(cuid())
  projectId         String
  project           Project            @relation(fields: [projectId], references: [id])
  journeyEventItems JourneyEventItem[]
  eventName         String
  createdAt         DateTime           @default(now())
  firstSeenDate     DateTime           @default(now())
  lastSeenDate      DateTime           @updatedAt
  firedCount        BigInt

  @@unique([projectId, eventName])
}

model Journey {
  id                  String               @id @default(cuid())
  name                String
  slug                String
  variants            Variant[]
  default             Boolean              @default(false)
  journeyEventItems   JourneyEventItem[]
  journeyPaywallItems JourneyPaywallItem[]
  projectId           String
  project             Project              @relation(fields: [projectId], references: [id])
  userCount           BigInt
  userCountActive     BigInt
  conversionCount     BigInt
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

enum JourneyItemType {
  EVENT
  PAYWALL
}

enum EventSeenType {
  ORDINAL
  SINCEINSTALL
}

model JourneyEventItem {
  id                   String          @id @default(cuid())
  journeyOrder         Int
  journeyId            String
  journey              Journey         @relation(fields: [journeyId], references: [id])
  journeyItemtype      JourneyItemType
  journeyItemEventType EventSeenType
  eventId              String
  event                Event           @relation(fields: [eventId], references: [id])
  firedCount           BigInt
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
}

model JourneyPaywallItem {
  id                   String          @id @default(cuid())
  journeyOrder         Int
  journeyId            String
  journey              Journey         @relation(fields: [journeyId], references: [id])
  journeyItemtype      JourneyItemType
  journeyItemEventType EventSeenType
  paywallId            String
  Paywall              Paywall         @relation(fields: [paywallId], references: [id])
  impressionCount      BigInt
  conversionCount      BigInt
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
}

model ABTest {
  id                                  String    @id @default(cuid())
  name                                String
  slug                                String
  projectId                           String
  project                             Project   @relation(fields: [projectId], references: [id])
  variants                            Variant[]
  percentTotalTraffic                 Float
  active                              Boolean
  createdAt                           DateTime  @default(now())
  updatedAt                           DateTime  @updatedAt
  becomeActiveDate                    DateTime
  becomeInactiveActiveDate            DateTime
  userCount                           BigInt
  userCountActive                     BigInt
  conversionCount                     BigInt
  convertWinningVariantDefaultJourney Boolean
  atStatSig                           Boolean
}

model Variant {
  id                   String   @id @default(cuid())
  percentABTestTraffic Float
  journeyId            String
  journey              Journey  @relation(fields: [journeyId], references: [id])
  abTestId             String
  abTest               ABTest   @relation(fields: [abTestId], references: [id])
  userCount            BigInt
  userCountActive      BigInt
  conversionCount      BigInt
  isWinner             Boolean
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}
