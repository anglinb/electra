// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
  teams         Team[]
  roles         TeamUserRole[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

enum TeamType {
  PERSONAL
  BUSINESS
}

model Team {
  id           String     @id @default(cuid())
  name         String
  teamType     TeamType
  projects     Project[]
  users        TeamUserRole[]
  image        String?
  slug         String
  personalUser User?      @relation(fields: [userId], references: [id])

  @@unique([slug], name: "Team_slug_unique")
  userId String?
}

enum RoleType {
  OWNER
  MEMBER
}

model TeamUserRole {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  teamId String
  team   Team   @relation(fields: [teamId], references: [id])
  role  RoleType @default(MEMBER)
}

model Project {
  id     String @id @default(cuid())
  teamId String
  team   Team   @relation(fields: [teamId], references: [id])
  name   String
  slug   String
  // environments            ProjectEnvironment[]
  // authKeys                ProjectAuthKey[]
  // apiKeys                 ProjectAPIKey[]

  @@unique([slug, teamId], name: "Project_Team_slug_unique")
}
